import 'dart:io';

import 'package:build/build.dart';
import 'package:path/path.dart';
import 'package:yaml/yaml.dart';

class VersionGenBuilder extends Builder {
  @override
  Future<void> build(BuildStep buildStep) async => generate();

  @override
  Map<String, List<String>> get buildExtensions => {
        r"$lib$": ["version.gen.dart"],
      };

  Future<void> generate({
    String pubspecPath = 'pubspec.yaml',
    String genFilePath = 'lib/gen/version.gen.dart',
  }) async {
    final pubspecFile = File(pubspecPath);
    final pubspecContent = await pubspecFile.readAsString();
    final settings = loadYaml(pubspecContent) as Map?;

    if (settings == null) {
      throw ArgumentError('Invalid pubspec.yaml content.');
    }

    final versionSpec = settings['version_gen']?['version-spec'];
    final specPath = versionSpec ?? pubspecPath;

    final outputPath = settings['version_gen']?['path'] ?? 'lib/gen';
    final outputFile = File(join(outputPath, 'version.gen.dart'));

    if (specPath == pubspecPath) {
      final version = settings['version'] ?? '';

      await _writeGeneratedFile(outputFile, "String packageVersion = '$version';");
    } else {
      final specFile = File(specPath);
      final specContent = await specFile.readAsString();
      final specMap = loadYaml(specContent) as Map?;

      if (specMap == null) {
        throw ArgumentError('Invalid version spec file content.');
      }

      final versionValues = specMap.entries.where((entry) => entry.value is String).map((entry) {
        String camelCaseKey = entry.key.split('_').map((String e) => e.capitalize()).join();
        camelCaseKey = camelCaseKey[0].toLowerCase() + camelCaseKey.substring(1);
        return '  static String $camelCaseKey = \'${entry.value}\';';
      }).join('\n');

      StringBuffer stringBuffer = StringBuffer();
      stringBuffer.writeln("class Version {");
      stringBuffer.writeln(versionValues);
      stringBuffer.write("}");

      await _writeGeneratedFile(outputFile, stringBuffer.toString());
    }
  }

  Future<void> _writeGeneratedFile(File file, String content) async {
    if (!file.existsSync()) {
      await file.create(recursive: true);
    }
    await file.writeAsString('''/// DO NOT MODIFY BY HAND, Generated by version_gen
$content
''');
  }
}

Builder build(BuilderOptions options) => VersionGenBuilder();

extension StringExtension on String {
  String capitalize() {
    return "${this[0].toUpperCase()}${substring(1)}";
  }
}
